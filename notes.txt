================================================================================
Bake Notes
================================================================================
Pieces:

1) A method for analyzing cpp files and determining build dependencies.

2) Analyzing .bake files and determining project dependencies and other settings


File extensions:
- Header: .h .hh .hpp
- Source: .c .cc .cpp .cxx .c++


How to link against a static library
- See tests/libtest/mainprog
- Given libfoobar.a, we can do either:
  - g++ -o main main.cpp -lfoobar -L../     (use -l option, plus -L for path)
  - g++ -o main main.cpp ../libfoobar.a     (list path to lib)



================================================================================
Sample files
================================================================================

# Define a project named 'Proj1'
project Proj1 {
  # The project type determines what kind of file will be created, as well as 
  # its name. Given a project named 'foo', we can build one of three file types:
  # 1) An application named foo
  # 2) A static library named foo.a
  # 3) A shared library named foo.so
  type = app | lib | dll  

  # All files in this project that should be compiled
  files {
    foo.cpp
    bar.cpp
    blah.cpp
  }

  # All the other projects that this project depends on
  deps {
    Proj2
    Proj3
  }

  # A list of third-party libraries used by this project
  libs {
    sqlite.so
    libjson.a
  }

  # Paths to search for included files
  include-paths {
    /usr/local/boost_1_47_0/include/
  }

  # Paths to search for third-party library files
  lib-paths {
    /usr/local/boost_1_47_0/lib/
  }
}




# A system defines a set of projects to build. Here we define a system named
# SomeComplexSystem.
system SomeComplexSystem {
  # Here we list the projects in the system. Each project can optionally include
  # the location (to the right of the equals sign). If no location is given,
  # bake will look in the subdirectory named after the project.
  projects {
    Proj1 [ = ./Proj1]
    Proj2 [ = ./Proj2]
    Proj3 [ = ./Proj3]
  }
}


================================================================================
Directory structure:
================================================================================

SystemDir/
  .bake
  Proj1/
    .bakeproj
    foo.h
    bar.h
    bar.cpp
  Proj2/
    .bakeproj
    cat.h
    dog.cpp
  ...

You can see we have the .bakesys (system-level) and .bakeproj (project-level)
bake files.

Do we even need .bakesys vs .bakeproj?  What if we just merge all bake files
together as we parse?




